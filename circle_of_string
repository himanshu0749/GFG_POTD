public class Solution {

    // Method to perform DFS traversal
    private void dfs(int node, List<List<Integer>> graph, boolean[] visited) {
        visited[node] = true;
        for (int neighbor : graph.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, graph, visited);
            }
        }
    }

    public int isCircle(String[] A) {
        // Initialize the graph
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < 26; i++) {
            graph.add(new ArrayList<>());
        }
        boolean[] visited = new boolean[26];

        int start = -1;

        // Build the graph
        for (String s : A) {
            int u = s.charAt(0) - 'a';
            int v = s.charAt(s.length() - 1) - 'a';
            graph.get(u).add(v);
            graph.get(v).add(u);
            if (start == -1) {
                start = u;
            }
        }

        // Perform DFS from the starting node
        if (start != -1) {
            dfs(start, graph, visited);
        }

        // Check if all nodes with edges are visited
        for (int i = 0; i < 26; i++) {
            if (graph.get(i).size() > 0 && !visited[i]) {
                return 0;
            }
            if (graph.get(i).size() % 2 != 0) {
                return 0;
            }
        }
        return 1;
    }
