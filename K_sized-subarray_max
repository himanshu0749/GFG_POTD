 ArrayList<Integer> result = new ArrayList<>();

        if (arr == null || k <= 0 || n < k) {
            return result;
        }

        // Arrays to store maximum of the current subarray
        int[] left = new int[n];
        int[] right = new int[n];

        // Fill left array where left[i] is the maximum from arr[i] to arr[i + k - 1] for each block
        for (int i = 0; i < n; i++) {
            if (i % k == 0) {
                left[i] = arr[i];
            } else {
                left[i] = Math.max(left[i - 1], arr[i]);
            }
        }

        // Fill right array where right[i] is the maximum from arr[i - k + 1] to arr[i] for each block
        for (int i = n - 1; i >= 0; i--) {
            if (i % k == k - 1 || i == n - 1) {
                right[i] = arr[i];
            } else {
                right[i] = Math.max(right[i + 1], arr[i]);
            }
        }

        // Collect the maximum values for each subarray of size k
        for (int i = 0; i <= n - k; i++) {
            result.add(Math.max(right[i], left[i + k - 1]));
        }

        return result;



--------------------------------------------------------------------------------------------------------------------------------------

2nd solution


import java.util.ArrayList;

class Solution {
    // Function to find maximum of each subarray of size k.
    static ArrayList<Integer> max_of_subarrays(int arr[], int n, int k) {
        ArrayList<Integer> result = new ArrayList<>();

        // Traverse the array
        for (int i = 0; i <= n - k; i++) {
            int max = arr[i];
            // Find the maximum in the current window
            for (int j = i + 1; j < i + k; j++) {
                if (arr[j] > max) {
                    max = arr[j];
                }
            }
            result.add(max);
        }

        return result;
    }

    public static void main(String[] args) {
        int arr[] = {1, 2, 3, 1, 4, 5, 2, 3, 6};
        int n = arr.length;
        int k = 3;
        ArrayList<Integer> res = max_of_subarrays(arr, n, k);
        for (int x : res) {
            System.out.print(x + " ");
        }
    }
}
