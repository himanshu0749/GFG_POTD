class Solution {
    public static long maximumSum(int n, int k) {
        List<Integer> oddNonPrimeNumbers = new ArrayList<>();

        for (int i = 1; i <= n; i += 2) { // Iterate through odd numbers only
            if (!isPrime(i)) {
                oddNonPrimeNumbers.add(i);
            }
        }

        if (oddNonPrimeNumbers.size() < k) {
            return -1;
        }

        Collections.sort(oddNonPrimeNumbers, Collections.reverseOrder());
        
        long sum = 0;
        for (int i = 0; i < k; i++) {
            sum += oddNonPrimeNumbers.get(i);
        }

        return sum;
    }

    private static boolean isPrime(int num) {
        if (num <= 1) return false;
        if (num <= 3) return true;
        if (num % 2 == 0 || num % 3 == 0) return false;

        for (int i = 5; i * i <= num; i += 6) {
            if (num % i == 0 || num % (i + 2) == 0) return false;
        }
        return true;
    }
}
